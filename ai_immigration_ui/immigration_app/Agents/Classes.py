from pydantic import BaseModel, Field, BeforeValidator
from typing import Annotated, Dict, Union
import ollama
import re
import json
import datetime
import sys
import os
from dotenv import load_dotenv
from pydantic_ai.models.openai import OpenAIModel
from pydantic_ai.providers.openai import OpenAIProvider

load_dotenv()

from pydantic_ai import Agent

system_prompt = """
You are a parser which will parse the user input into a string.
you will parse the user input into a string which is short and specific.
if the input is short, you should return the input itself.
if the input is long, you should return the parsed version of the input.
if the input has multi parts parse it into dictionary in json format.
*Dont add any additional text before or after the parsed string.
*All parsing should be base on the question
"""
openai_model = OpenAIModel('gpt-4.1', provider=OpenAIProvider(api_key=os.getenv("Sub_Agent_Key")))

# Set up the GPT-4.1 LLM for parsing
openai_parser_model = Agent(
    model = openai_model,
    system_prompt=system_prompt,
)

def debug_print(*args, **kwargs):
        print("[parser_with_llm DEBUG]", *args, **kwargs, file=sys.stderr)

def parser_with_llm(user_input: Union[str, None]) -> Union[Dict[str, Union[list, str, float]], str]:
    """
    Parse user input using GPT-4.1 LLM to extract structured information
    """

    debug_print(f"Called parser_with_llm at {datetime.datetime.now()}")
    debug_print(f"Input: {user_input!r}")

    if not user_input:
        debug_print("No user input provided, returning empty string.")
        return ""
    # Compose the messages for the LLM
    response = openai_parser_model.run_sync(user_input)
    debug_print(f"Raw LLM response: {response!r}")
    content = response.output.strip() if isinstance(response, dict) else str(response.output).strip()
    debug_print(f"LLM content: {content!r}")

    # Try to parse as JSON if possible, else return as string
    try:
        extracted_json = re.search(r'\{[\s\S]*?\}', content)
        if extracted_json:
            debug_print("Extracted JSON substring:", extracted_json.group(0))
            parsed_json = json.loads(extracted_json.group(0))
            debug_print("Parsed JSON:", parsed_json)
            return parsed_json
        else:
            debug_print("No JSON found, returning content as string.")
            return content
    except Exception as e:
        debug_print(f"Exception during JSON parsing: {e}")
        debug_print("Returning content as string.")
        return content

# Create the LLMParsedDict type annotation
LLMParsedDict = Annotated[Union[Dict[str, Union[list, str, float]], str], BeforeValidator(parser_with_llm)]



class Agent_Output(BaseModel):
    Agent_Name: str = Field(description="The identifier of the agent that produced the response")
    Agent_Output: str = Field(description="The actual content or result generated by the agent")
    Agent_Output_Structure: str = Field(description="The format or schema of the output data")

class Agent_output_evaluation(BaseModel):
    score: float = Field(description="A numerical assessment of the agent's performance, ranging from 0 (poor) to 1 (excellent)")
    feedback: str = Field(description="Constructive feedback to guide future agent interactions or task execution")


class InfoTemplate(BaseModel):

    name: str = Field(description="The name of user")
    age: Union[int, str] = Field(description="The age of user")
    current_country: str = Field(description="The current location of user")
    reason_for_immigration: Union[Dict[str, Union[list, str]], str] = Field(description="The reason for immigration of user")
    target_country: str = Field(description="The target location of user")

    target_job: Union[Dict[str, Union[list, str]], str] = Field(description="if user wants to immigrate for job: The target job of user")
    experience: Union[Dict[str, Union[list, str]], str] = Field(description="User Experiences he has")

    target_education_field: Union[Dict[str, Union[list, str]], str] = Field(description="if user wants to immigrate for Education: The target field of study")
    previous_degrees: Union[Dict[str, Union[list, str]], str] = Field(description="Previous academic degrees and qualifications obtained by the user")
    target_education_degree: Union[Dict[str,str], str] =  Field(description="Target Degree the user want to apply for")
    target_position: Union[Dict[str,str], str] =  Field(description="Target Position the user want to apply for")
    language_proficiency: Union[Dict[str, Union[list, str, float]], str] = Field(description="User IELTS or Toffle or any kind of related test Score")

    financial_status: Union[Dict[str, Union[list, str]], str] = Field(description="Details about the user's financial means to support themselves during the immigration process")

    family_ties: Union[Dict[str, Union[list, str]], str] = Field(default=None, description="Information about family members in the target country, if any")
    
    health_status: Union[Dict[str, Union[list, str]], str] = Field(default=None, description="General health condition and any pertinent medical information")
    
    criminal_record: Union[Dict[str, Union[list, str]], str] = Field(default=None, description="Information regarding any criminal history")

class Name_SearchResult(BaseModel):
    List_of_OverllExtraactednames: list[str] = Field(
        description="The list of all extracted names (company or university)"
    )
    total_results: int = Field(
        description="The total number of results found"
    )
    File_name: str = Field(description="The name of the file to save the extracted names")

class LLM_extracted_list(BaseModel):
    LLM_Extracted_list: list[str] = Field(
        description="The List of searched names Extracted by llm"
    )
class Scraped_data(BaseModel):
    name: str
    requirements: str
    deadlines: str

class ScrapedDataList(BaseModel):
    items: list[Scraped_data]

class output_agent(BaseModel):
    request: str = Field(description="The kind of request done by the agent")
    outputs_recieved: Union[str, ScrapedDataList,InfoTemplate, Name_SearchResult, list[str], Scraped_data, None] = Field(description="The output of the request")


class ImmigrationProfileModelparse(BaseModel):
    name: str = Field(description="The name of user")
    age: str = Field(description="The age of user")
    current_country: str = Field(description="The current location of user")
    reason_for_immigration: str = Field(description="The reason for immigration of user")
    target_country: str = Field(description="The target location of user")

    target_job: LLMParsedDict = Field(description="if user wants to immigrate for job: The target job of user")
    experience: LLMParsedDict = Field(description="User Experiences he has")

    target_education_field: LLMParsedDict = Field(description="if user wants to immigrate for Education: The target field of study")
    previous_degrees: LLMParsedDict = Field(description="Previous academic degrees and qualifications obtained by the user")
    target_position: LLMParsedDict = Field(description="Target Position the user want to apply for")
    target_education_degree: LLMParsedDict = Field(description="Target Degree the user want to apply for")

    language_proficiency: LLMParsedDict = Field(description="User IELTS or Toffle or any kind of related test Score")

    financial_status: LLMParsedDict = Field(description="Details about the user's financial means to support themselves during the immigration process")

    family_ties: LLMParsedDict = Field(default=None, description="Information about family members in the target country, if any")
    
    health_status: LLMParsedDict = Field(default=None, description="General health condition and any pertinent medical information")
    
    criminal_record: LLMParsedDict = Field(default=None, description="Information regarding any criminal history")

class ImmigrationProfileModel(BaseModel):
    name: str = Field(description="The name of user")
    age: str = Field(description="The age of user")
    current_country: str = Field(description="The current location of user")
    reason_for_immigration: str = Field(description="The reason for immigration of user")
    target_country: str = Field(description="The target location of user")
    target_job: str = Field(description="if user wants to immigrate for job: The target job of user")
    experience: str = Field(description="User Experiences he has")
    target_education_field: str = Field(description="if user wants to immigrate for Education: The target field of study")
    previous_degrees: str = Field(description="Previous academic degrees and qualifications obtained by the user")
    target_position: str = Field(description="Target Position the user want to apply for")
    target_education_degree: str = Field(description="Target Degree the user want to apply for")
    language_proficiency: str = Field(description="User IELTS or Toffle or any kind of related test Score")
    financial_status: str = Field(description="Details about the user's financial means to support themselves during the immigration process")
    family_ties: str = Field(default=None, description="Information about family members in the target country, if any")
    health_status: str = Field(default=None, description="General health condition and any pertinent medical information")
    criminal_record: str = Field(default=None, description="Information regarding any criminal history")

class CommandGen(BaseModel):
    Command: str = Field(description="The command to be executed by the agent")
    Context: Union[str, InfoTemplate, dict, ImmigrationProfileModel] = Field(description="Additional context or information needed to execute the command")